@page "/friends"
@layout Shared.SocialLayout
@inject NavigationManager NavigationManager
@using Crowd_CTRL.Pages
@* @using Shared *@
@using Components
<Crowd_CTRL.Shared.ConfirmModal @ref="ConfirmModal"></Crowd_CTRL.Shared.ConfirmModal>
<Crowd_CTRL.Shared.ChatBox @ref="ChatBox"></Crowd_CTRL.Shared.ChatBox>


<style>
    .main-friend-search-container{
        padding-top: 10px;
        min-height: 500px;
        margin: auto;
        width: 80%;
        height: 100%;
    }
    .search-container{
        padding-bottom: 4%;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    .search-results-container{
        min-height: 50%;
        background-color: rgba(255,255,255,0.05);
        display: flex;
        align-items: center;
        justify-content: center;
        padding-top: 30px;
        padding-bottom: 30px;

    }
    form{
        width: 100%;
    }
    .res-list{
        height: 90%;
        width: 90%;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
    }
    hr{
        color: #878787;
        background-color: white;
        width: 100%;
    }
    .friend-item{
        width: 100%;
        display: flex;
        align-items: center;

    }
    .friend-actions{
        margin-left: auto;
    }
    .friend-action-button{
        display: inline-block;
        height: 30px;
        padding: 0;
        margin: 0;
        vertical-align: top;
        width: 30px;
        border-width: 0px;
        background-color:#ffffff00;
        align-items: center;
    }
    .friend-search-other-prompt{
        width: 95%;
        align-self: center;
        height: 35%;
        justify-content: center;
        align-items: flex-end;
        display: flex;
    }
    .pic{
        border-radius: 50%;
        width: 35px;
        height: 35px;
    }
</style>

<h1 style="text-align: center;">FRIENDS</h1>
<div class="main-friend-search-container">
    <div class="search-container">
        <EditForm style="display: flex; justify-content: center;" Model="@friend" OnSubmit=@FormSubmitted>
            <InputText placeholder="Search For Users" id="searchBox" name="searchBox" style="width: 89%; color: white; background-color: #4d4d4d; padding-left: 10px;" @bind-Value="friend.Username" /> 
            <div style="text-align: center">
                <button class="btn btn-primary">Search</button>
            </div>
        </EditForm>
    </div>
    <div class="list-header">
        <h2>@resTitle</h2>
    </div>
    
    <div class="search-results-container">
        @* Not searching for friends *@
        @if (@friend.Username == ""){
            <div class="res-list">
                @foreach (var listFriend in Program.Friends.FindAll(fr => fr.isFriend))
                {
                    <div class="friend-item">
                        <div style="display: inline-flex; align-items: center;">
                            <button class="friend-action-button" style="padding-top: 4px;" title="Chat" @onclick='() => ChatBox.StartChat(listFriend.Username)'>
                                <RadzenIcon Style="font-size:24px; color: white; justify-self: flex-end;" Icon="chat"/>
                            </button>
                            <div style="padding-right: 10px; padding-left: 10px;">
                                <img src="@listFriend.ProfilePicture" alt="@listFriend.Username's profile picture" class="pic"/>
                            </div>
                            <a style="color: white; font-size:20px;" href="/profile/@listFriend.Username">
                                @listFriend.Username
                            </a>
                        </div>
                        <div class="friend-actions">
                            <button class="friend-action-button" title="Remove friend" @onclick='() => ConfirmModal.Open(listFriend.Username)'>
                                <RadzenIcon Style="font-size:32px; color: red;" Icon="clear"/>
                            </button>
                            <button class="friend-action-button" title="Mute notifications" @onclick='() => { listFriend.isNotify = !listFriend.isNotify; }'>
                                @if (!@listFriend.isNotify)
                                {
                                    <RadzenIcon Style="font-size:31px; color: red;" Icon="notifications_off"/>
                                }
                                else
                                {
                                    <RadzenIcon Style="font-size:31px; color: #0C9CED;" Icon="notifications_active"/>
                                }
                            </button>
                        </div>
                    </div>
                    <hr>
                }

            </div>
        }
        @* When the user tries to search something *@
        @if(@friend.Username != ""){
            <div class="res-list">
                <div class="friend-item" style="width: 90%; align-self: center;">
                    <div style="padding-right: 10px; padding-left: 10px;">
                        <img src="@friend.ProfilePicture" alt="@friend.Username's profile picture" class="pic"/>
                    </div>
                    <a style="color: white" href="/profile/@friend.Username">
                        <h2>@friend.Username</h2>
                    </a>
                    <div class="friend-actions">
                        @if (friendRequested)
                        {
                            <button class="btn btn-light" @onclick="DeleteFriend">
                                Request Sent!
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-primary" @onclick="RequestFriend">
                                Add Friend
                            </button>
                        }
                    </div>
                </div>
                <hr>
                <div class="friend-search-other-prompt">
                    <div style="text-align: center;">
                        <h2>Others you may know</h2>
                        <h4>(based on past games played and common friends)</h4>
                    </div>
                    
                </div>
                <br>
                @foreach (var potentialFriend  in Program.Friends.FindAll(user => !user.isFriend))
                {
                    <div class="friend-item" style="width: 90%; align-self: center;">
                        <div style="padding-right: 10px; padding-left: 10px;">
                            <img src="@potentialFriend.ProfilePicture" alt="@potentialFriend.Username's profile picture" class="pic"/>
                        </div>
                        <a style="color: white" href="/profile/@potentialFriend.Username">
                            <h2>@potentialFriend.Username</h2>
                        </a>
                        <div class="friend-actions">
                            <button class="btn btn-primary" @onclick="() => AddFriend(potentialFriend)" >
                                Add Friend
                            </button>
                        </div>
                    </div>
                    <hr>
                }
            </div>
        }
        
    </div>

</div>

@code{
    ConfirmModal ConfirmModal { get; set; }

    private Friend friend = new("");

    ChatBox ChatBox {get; set; }


    string resTitle = "My Friends";

    bool friendRequested = false;

    private Dictionary<string, string> friendMutedStatus = new Dictionary<string, string>();

    @* Things are likely going to change here with this friends array and how it is populated *@
    @* and functions, so bear that in mine*@

    Task initFriendsDict()
    {
        for (int i = 0; i < 7; i++)
        {
            friendMutedStatus.Add(("Friend " + (i+1)), "notifications_active");
        }
        return Task.CompletedTask;
    }
    protected override async Task OnInitializedAsync(){
        await initFriendsDict();
    }

    
    private void FormSubmitted()
    {
        resTitle = "Friend Search";
        
    }
    private void UserProfileNavigate()
    {
        NavigationManager.NavigateTo("user_profile");
    }

    private void changeMutedStatus(string FName){
        if(friendMutedStatus[FName].Equals("notifications_active")){
            friendMutedStatus[FName] = "notifications_off";
        }
        else{
            friendMutedStatus[FName] = "notifications_active";
        }
    }

    void AddFriend(Friend newFriend)
    {
        newFriend.isFriend = true;
    }
    
    private void RequestFriend()
    {
        friend.isFriend = true;
        Program.Friends.Add(friend);
        friend = new("");
        StateHasChanged();
    }

    private void DeleteFriend()
    {
        var index = Program.Friends.FindIndex(user => user.Username == friend.Username);
        if (index != -1)
        {
            Program.Friends.RemoveAt(index);
        }
        friendRequested = false;
        StateHasChanged();
    }

}