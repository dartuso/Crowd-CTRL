@namespace Components
@inject NavigationManager NavigationManager

@using System;
@using System.Text.RegularExpressions;

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" style="color:black">Confirmation</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => Close()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            @if (inputType == 0)
            {
                <div class="modal-body">
                    <p style="color:black">The clan size is valid!</p>
                </div>
            }
            else if (inputType == 1)
            {
                <div class="modal-body">
                    <p style="color:black">The clan size cannot be empty!</p>
                </div>
            }
            else if (inputType == 2)
            {
                <div class="modal-body">
                    <p style="color:black">The clan size must be a number!</p>
                </div>
            }
            else
            {
                <div class="modal-body">
                    <p style="color:black">The clan size must be a positive number not larger than 100!</p>
                </div>
            }

            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="() => Close()">Close</button>
            </div>

        </div>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade @ModalClass" style="display: @ModalDisplay"></div>
}


@code {

    public string clanSize { get; set; } = "";
    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;
    public int inputType;   // 0: valid 1: empty 2: not a number 3: a number in the invalid range

    public async Task Open()
    {
        Regex rgx = new Regex(@"^([1-9][0-9]*|0)$");

        inputType = 0;
        if (String.IsNullOrEmpty(clanSize))
        {
            inputType = 1;
        }
        else if (!rgx.IsMatch(clanSize))
        {
            inputType = 2;
        }
        if (inputType == 0)
        {
            inputType = 3;
            for (int i = 1; i <= 100; ++i)
            {
                if (i.ToString().Equals(clanSize))
                {
                    inputType = 0;
                    break;
                }
            }
        }

        ModalDisplay = "block;";
        await Task.Delay(100);//Delay allows bootstrap to perform nice fade animation
        ModalClass = "show";
        StateHasChanged();
    }

    public async Task Close()
    {
        ModalClass = "";
        await Task.Delay(250);
        ModalDisplay = "none;";
        StateHasChanged();
    }
}